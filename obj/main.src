; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\MAIN.C"
	.assume ADL=1
	SEGMENT CODE
_pixelate:
	LD	HL,-16
	CALL	__frameset
	LD	HL,(IX+9)
	CALL	__icmpzero
	JR	Z,L_18
	LD	BC,0
	LD	(IX+-13),BC
	JR	L_16
L_14:
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_13
L_11:
	LD	BC,0
	LD	(IX+-9),BC
	JR	L_10
L_8:
	LD	BC,0
	LD	(IX+-6),BC
	JR	L_7
L_5:
	LD	BC,(IX+-9)
	LD	HL,(IX+-13)
	ADD	HL,BC
	LD	(IX+-16),HL
	LD	IY,(IX+6)
	LD	A,(IY+1)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,(IX+-16)
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_6
	LD	IY,(IX+6)
	LD	A,(IY+0)
	LD	(IX+-10),A
	LD	BC,(IX+-6)
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+-10)
	UEXT	HL
	LD	L,A
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_6
	LD	A,(IX+-10)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,(IX+-13)
	CALL	__imuls
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	BC,HL
	LD	IY,(IX+6)
	LEA	HL,IY+2
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IX+-10)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+-16)
	CALL	__imuls
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	BC,(IX+-6)
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IY)
	LD	IY,(IX+6)
	LEA	HL,IY+2
	ADD	HL,BC
	LD	(HL),A
L_6:
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
L_7:
	LD	BC,(IX+-6)
	LD	HL,(IX+9)
	OR	A,A
	SBC	HL,BC
	JR	NC,L_5
	LD	BC,(IX+-9)
	INC	BC
	LD	(IX+-9),BC
L_10:
	LD	BC,(IX+-9)
	LD	HL,(IX+9)
	OR	A,A
	SBC	HL,BC
	JR	NC,L_8
	LD	HL,(IX+9)
	INC	HL
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	(IX+-3),HL
L_13:
	LD	IY,(IX+6)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_11
	LD	HL,(IX+9)
	INC	HL
	LD	BC,(IX+-13)
	ADD	HL,BC
	LD	(IX+-13),HL
L_16:
	LD	IY,(IX+6)
	LD	A,(IY+1)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,(IX+-13)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_14
L_18:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _pixelate ***************************
;Name                         Addr/Register   Size   Type
;G_1                                  IX-16      3   variable
;row                                  IX-13      3   variable
;G_0                                  IX-10      1   variable
;sect_row                              IX-9      3   variable
;sect_col                              IX-6      3   variable
;col                                   IX-3      3   variable
;pixel_size                            IX+9      3   parameter
;sprite                                IX+6      3   parameter


; Stack Frame Size: 28 (bytes)
;       Spill Code: 0 (instruction)


_pixelated:
	LD	HL,-19
	CALL	__frameset
	LD	BC,_malloc
	PUSH	BC
	LD	IY,(IX+6)
	LD	C,(IY+1)
	LD	B,0
	PUSH	BC
	LD	C,(IY+0)
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-19),HL
	CALL	__icmpzero
	JR	NZ,L_21
	LD	BC,1
	PUSH	BC
	CALL	_exit
	POP	BC
L_21:
	LD	HL,(IX+9)
	CALL	__icmpzero
	JR	NZ,L_38
	LD	HL,(IX+6)
	JR	L_40
L_38:
	LD	BC,0
	LD	(IX+-12),BC
	JR	L_37
L_35:
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_34
L_32:
	LD	BC,0
	LD	(IX+-9),BC
	JR	L_31
L_29:
	LD	BC,0
	LD	(IX+-6),BC
	JR	L_28
L_26:
	LD	BC,(IX+-9)
	LD	HL,(IX+-12)
	ADD	HL,BC
	LD	(IX+-16),HL
	LD	IY,(IX+6)
	LD	A,(IY+1)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,(IX+-16)
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_27
	LD	IY,(IX+6)
	LD	A,(IY+0)
	LD	(IX+-13),A
	LD	BC,(IX+-6)
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+-13)
	UEXT	HL
	LD	L,A
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_27
	LD	A,(IX+-13)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,(IX+-12)
	CALL	__imuls
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	BC,HL
	LD	IY,(IX+6)
	LEA	HL,IY+2
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IX+-13)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+-16)
	CALL	__imuls
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	BC,(IX+-6)
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IY)
	LD	IY,(IX+6)
	LEA	HL,IY+2
	ADD	HL,BC
	LD	(HL),A
L_27:
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
L_28:
	LD	BC,(IX+-6)
	LD	HL,(IX+9)
	OR	A,A
	SBC	HL,BC
	JR	NC,L_26
	LD	BC,(IX+-9)
	INC	BC
	LD	(IX+-9),BC
L_31:
	LD	BC,(IX+-9)
	LD	HL,(IX+9)
	OR	A,A
	SBC	HL,BC
	JR	NC,L_29
	LD	HL,(IX+9)
	INC	HL
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	(IX+-3),HL
L_34:
	LD	IY,(IX+6)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_32
	LD	HL,(IX+9)
	INC	HL
	LD	BC,(IX+-12)
	ADD	HL,BC
	LD	(IX+-12),HL
L_37:
	LD	IY,(IX+6)
	LD	A,(IY+1)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,(IX+-12)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_35
	LD	HL,(IX+-19)
L_40:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _pixelated ***************************
;Name                         Addr/Register   Size   Type
;_exit                               IMPORT  -----   function
;_malloc                             IMPORT  -----   function
;_gfx_AllocSprite                    IMPORT  -----   function
;temp                                 IX-19      3   variable
;G_3                                  IX-16      3   variable
;G_2                                  IX-13      1   variable
;row                                  IX-12      3   variable
;sect_row                              IX-9      3   variable
;sect_col                              IX-6      3   variable
;col                                   IX-3      3   variable
;pixel_size                            IX+9      3   parameter
;sprite                                IX+6      3   parameter


; Stack Frame Size: 31 (bytes)
;       Spill Code: 0 (instruction)


_print_CharWrappedString:
	LD	HL,-15
	CALL	__frameset
	CALL	_gfx_GetTextX
	LD	(IX+-9),HL
	CALL	_gfx_GetTextY
	LD	(IX+-12),HL
	LD	BC,0
	LD	(IX+-3),BC
	LD	BC,(IX+6)
	LD	(IX+-6),BC
	JR	L_44
L_45:
	LD	BC,(IX+-6)
	LD	(IX+-15),BC
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
	LD	HL,(IX+-15)
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_PrintChar
	POP	BC
	LD	HL,(IX+-6)
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_gfx_GetCharWidth
	POP	BC
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	(IX+-3),HL
	LD	BC,(IX+-9)
	ADD	HL,BC
	LD	(IX+-9),HL
	LD	BC,(IX+-3)
	LD	HL,(IX+12)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_43
	LD	BC,(IX+9)
	LD	(IX+-9),BC
	LD	BC,0
	LD	(IX+-3),BC
	LD	IY,(IX+-12)
	LEA	IY,IY+8
	LD	(IX+-12),IY
L_43:
	LD	BC,(IX+-12)
	PUSH	BC
	LD	BC,(IX+-9)
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
	LD	BC,1
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
L_44:
	LD	HL,(IX+-6)
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_45
	LD	SP,IX
	POP	IX
	RET	


;**************************** _print_CharWrappedString ***************************
;Name                         Addr/Register   Size   Type
;_gfx_Blit                           IMPORT  -----   function
;_gfx_SetTextXY                      IMPORT  -----   function
;_gfx_GetCharWidth                   IMPORT  -----   function
;_gfx_PrintChar                      IMPORT  -----   function
;_gfx_GetTextY                       IMPORT  -----   function
;_gfx_GetTextX                       IMPORT  -----   function
;y                                    IX-12      3   variable
;x                                     IX-9      3   variable
;c                                     IX-6      3   variable
;curRowLen                             IX-3      3   variable
;xmax                                 IX+12      3   parameter
;xmin                                  IX+9      3   parameter
;string                                IX+6      3   parameter


; Stack Frame Size: 30 (bytes)
;       Spill Code: 0 (instruction)


;    1	// Program Name: FIREHAUZ
;    2	// Author(s): SomeCoolGuy
;    3	// Description: FireHauzer: Shooter RPG.
;    4	
;    5	/* Keep these headers */
;    6	#include <tice.h>
;    7	
;    8	/* Standard headers - it's recommended to leave them included */
;    9	#include <math.h>
;   10	#include <stdio.h>
;   11	#include <stdlib.h>
;   12	#include <string.h>
;   13	
;   14	#include <assert.h>
;   15	
;   16	#include <graphx.h>
;   17	#include <keypadc.h>
;   18	#include <debug.h>
;   19	
;   20	#include "pixelate.h"
;   21	#include "entity.h"
;   22	#include "print.h"
;   23	#include "gfx/images.h"
;   24	
;   25	#define LOGO_WIDTH 251
;   26	#define LOGO_HEIGHT 100
;   27	/*typedef struct {
;   28	    int x;
;   29	    int y;
;   30	    int xvel;
;   31	    int yvel;
;   32	    gfx_sprite_t * image;
;   33	} entity;*/
;   34	
;   35	/*Flags:
;   36	 1<<0: Opening's fade out transition starts
;   37	 1<<1: Opening's fade out transition ended. Start Opening's fade in
;   38	 1<<2: Opening's fade in ended. Menu Screen.
;   39	 1<<3: Choice in menu selected.
;   40	 1<<4: Whether the user's in another part of the menu or not.
;   41	 */
;   42	//void turnBitOn(void * bItem,unsigned int byte);
;   43	
;   44	void r_swap(int *arr,unsigned int size,int pos) {
_r_swap:
	LD	HL,-22
	CALL	__frameset
;   45	    //swaps items in a list randomly
;   46	    int i = (pos+random()) % size;
	LD	BC,(IX+12)
	CALL	__itol
	LD	(IX+-10),A
	LD	(IX+-9),BC
	CALL	_random
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+-9)
	LD	E,(IX+-10)
	CALL	__ladd
	LD	BC,(IX+9)
	XOR	A,A
	CALL	__lremu
	LD	(IX+-3),HL
;   47	    int temp = arr[i];
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	BC,(HL)
	LD	(IX+-6),BC
;   48	    arr[i] = arr[pos];
	LD	HL,(IX+12)
	LD	DE,(IX+6)
	LD	BC,(IX+6)
	LD	(IX+-22),BC	; spill
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	ADD	HL,DE
	LD	IY,HL
	LD	HL,(IX+-3)
	LD	DE,(IY)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,(IX+-22)	; unspill
	ADD	HL,BC
	LD	(HL),DE
;   49	    arr[pos] = temp;
	LD	HL,(IX+12)
	LD	BC,(IX+6)
	LD	(IX+-16),BC	; spill
	LD	DE,(IX+-6)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,(IX+-16)	; unspill
	ADD	HL,BC
	LD	(HL),DE
;   50	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _r_swap ***************************
;Name                         Addr/Register   Size   Type
;_random                             IMPORT  -----   function
;temp                                  IX-6      3   variable
;i                                     IX-3      3   variable
;pos                                  IX+12      3   parameter
;size                                  IX+9      3   parameter
;arr                                   IX+6      3   parameter


; Stack Frame Size: 37 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT BSS
_timer:
	DS	3
_flags:
	DS	3
;   51	volatile int timer;
;   52	uint24_t flags;
	SEGMENT CODE
;   53	
;   54	uint8_t title_screen(void);
;   55	void main(void) {
_main:
	LD	HL,-3
	CALL	__frameset
;   56	    int res;
;   57	    gfx_Begin();
	CALL	_gfx_Begin
;   58	    gfx_SetDrawBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;   59	    res = title_screen();
	CALL	_title_screen
	UEXT	HL
	LD	L,A
	LD	(IX+-3),HL
;   60	    if (res == 1) {
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	Z,L_48
;   61	        goto end;
;   62	    } else {
;   63	        gfx_SetDefaultPalette(gfx_8bpp);
	LD	BC,39
	PUSH	BC
	CALL	_gfx_SetDefaultPalette
	POP	BC
;   64	        gfx_SetColor(0xFF);
	LD	BC,255
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;   65	        gfx_SetTextScale(2,2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;   66	        while(!(kb_Data[6] & kb_Clear)) {
	JR	L_49
L_50:
;   67	            gfx_ZeroScreen();
	CALL	_gfx_ZeroScreen
;   68	            gfx_PrintStringXY("You can quit now",160-gfx_GetStringWidth("You can quit now")/2,112);
	LD	BC,112
	PUSH	BC
	LD	BC,L__22
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	LD	A,1
	CALL	__ishru_b
	LD	BC,HL
	LD	HL,160
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	LD	BC,L__23
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   69	            gfx_BlitBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;   70	            kb_Scan();
	CALL	_kb_Scan
;   71	        }
L_49:
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_50
L_48:
;   72	    }
;   73	end:
;   74	    /*free(holder);
;   75	    free(menu_options);
;   76	    free(stars);
;   77	    free(temp_arr);*/
;   78	    gfx_End();
	CALL	_gfx_End
;   79	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_gfx_End                            IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function
;_gfx_Blit                           IMPORT  -----   function
;_gfx_GetStringWidth                 IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_ZeroScreen                     IMPORT  -----   function
;_gfx_SetTextScale                   IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_gfx_SetDefaultPalette              IMPORT  -----   function
;_title_screen                       IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_gfx_Begin                          IMPORT  -----   function
;res                                   IX-3      3   variable


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__22:
	DB	"You can quit now"
	DB	0
L__23:
	DB	"You can quit now"
	DB	0
	SEGMENT CODE
;   80	
;   81	uint8_t title_screen(void) {
_title_screen:
	LD	HL,-1398
	CALL	__frameset
;   82	    //currently null values
;   83	    bool quittable;
;   84	    int i, j, k, l, menu_choice, nOfStars;
;   85	    entity stars[30];
;   86	    uint16_t temp_arr[255];
;   87	    //declared values
;   88	    uint8_t fadecolors[10] = {0xFF,0xBF,0x7F,0x3F,0x1E,0x1C,0x1A,0x18,0x10,0x08};
	LEA	DE,IX+-69
	LD	HL,_0temp55
	LD	BC,10
	LDIR	
;   89	    uint8_t flogo_indexes[47] = {0x94, 0xB5, 0xDE, 0xFF, 0xD6, 0xB4, 0xB6, 0x6B, 0x6C, 0xFE, 0x95, 0xD6, 0x29, 0x4A, 0x4B, 0x49, 0x21, 0x93, 0x8C, 0x00, 0x01, 0x20, 0x41, 0x73, 0x6A, 0x8B, 0x40, 0x69, 0x61, 0x62, 0x82, 0x8A, 0x81, 0x89, 0xAA, 0xAB, 0xA2, 0xC2, 0xC1, 0xCB, 0xAC, 0xE3, 0xC3, 0xE5, 0xE6, 0xCD, 0xC5}; //unique(flogo->data,flogo->width * flogo->height);
	LEA	DE,IX+-116
	LD	HL,_1temp56
	LD	BC,47
	LDIR	
;   90	    uint8_t transparent_index = 148;
;   91	    char menu_options[10][10];
;   92	    char str[100];
;   93	    int base_x = 25, size_x = 25;
	LD	BC,25
	LD	(IX+-30),BC
;   94	    int base_y = 2, size_y = 2;
	LD	BC,2
	LD	(IX+-24),BC
;   95	    int center_x = (320/2) - (flogo->width/2);
	LD	A,(_flogo_data)
	UEXT	HL
	LD	L,A
	CALL	__idivs
	LD	BC,HL
	LD	HL,160
	OR	A,A
	SBC	HL,BC
	LD	(IX+-34),HL
;   96	    int center_y = flogo->height/2;
	LD	A,(_flogo_data+1)
	UEXT	HL
	LD	L,A
	LD	BC,2
	CALL	__idivs
	LD	(IX+-37),HL
;   97	    gfx_sprite_t *holder = gfx_MallocSprite(size_x,size_y),*holder2;
	LD	BC,_malloc
	PUSH	BC
	LD	BC,2
	PUSH	BC
	LD	BC,25
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-6),HL
;   98	    gfx_SetTransparentColor(transparent_index); // it oddly always defaults to 148 when using convpng...
	LD	BC,148
	PUSH	BC
	CALL	_gfx_SetTransparentColor
	POP	BC
;   99	    //flogo_indexes = unique(flogo->data,5610);
;  100	    
;  101	intro:
;  102	    timer = 0;
;  103	    flags = 0x000000;
;  104	    //menu_options = (char **) malloc(3 * sizeof(char *));
;  105	    //backup the palette
;  106	    //gfx_SetPalette(images_pal,sizeof_images_pal,0);
;  107	    gfx_SetDefaultPalette(gfx_8bpp);
	LD	BC,39
	PUSH	BC
	LD	BC,0
	LD	(_timer),BC
	LD	(_flags),BC
	CALL	_gfx_SetDefaultPalette
	POP	BC
;  108	    for (i = 0;i < 256;i++) temp_arr[i] = gfx_palette[i];
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_61
L_59:
	LD	HL,(IX+-3)
	ADD	HL,HL
	LD	BC,HL
	LD	HL,BC
	LD	DE,14877184
	ADD	HL,DE
	LD	IY,HL
	LD	HL,IX
	LD	DE,-726
	ADD	HL,DE
	ADD	HL,BC
	LD	BC,(IY)
	LD	(HL),C
	INC	HL
	LD	(HL),B
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_61:
	LD	BC,256
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L_59
;  109	    //stars
;  110	    for (i=0;i < 30;i++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_65
L_63:
;  111	        stars[i].x = 320;
	LD	HL,(IX+-3)
	LD	A,21
	CALL	__imul_b
	LD	BC,HL
	LD	HL,IX
	LD	DE,-1356
	ADD	HL,DE
	ADD	HL,BC
	LD	IY,HL
	LD	BC,320
	LD	(IY+0),BC
;  112	        stars[i].y = rand()%235;
	CALL	_rand
	LD	BC,235
	CALL	__irems
	LD	BC,HL
	LD	HL,(IX+-3)
	LD	A,21
	CALL	__imul_b
	LD	DE,HL
	LD	HL,IX
	PUSH	BC
	PUSH	HL
	LD	HL,DE
	LD	BC,-1392	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	DE,-1356
	PUSH	BC
	PUSH	HL
	LD	HL,DE	; unspill
	LD	BC,-1395	; spill
	CALL	__istix
	POP	HL
	LD	BC,-1392	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,-1392	; spill
	CALL	__istix
	POP	HL
	LD	BC,-1395	; unspill
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	ADD	HL,DE
	PUSH	BC
	LD	BC,-1392	; unspill
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	ADD	HL,DE
	LD	IY,HL
	LD	(IY+3),BC
;  113	        stars[i].xvel = ((rand()%21)+5);
	LD	HL,(IX+-3)
	LD	A,21
	CALL	__imul_b
	LD	DE,HL
	LD	HL,IX
	LD	BC,-1359
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-1383	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-1356
	PUSH	BC
	PUSH	HL
	LD	HL,BC	; unspill
	LD	BC,-1398	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-1383	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-1383	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-1398	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	ADD	HL,BC
	LD	BC,-1383	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	ADD	HL,DE
	CALL	__istix
	CALL	_rand
	LD	BC,21
	CALL	__irems
	LD	IY,HL
	LD	BC,-1359
	CALL	__ildix
	LEA	BC,IY+5
	LD	IY,HL
	LD	(IY+6),BC
;  114	        stars[i].yvel = 0;
	LD	BC,-1359
	CALL	__ildix
	LD	IY,HL
	LD	BC,0
	LD	(IY+9),BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  115	    }
L_65:
	LD	BC,30
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_63
;  116	    i = 0;
	LD	BC,0
	LD	(IX+-3),BC
;  117	    while (size_x < 251 && size_y < 100) {
	JR	L_78
L_79:
;  118	        gfx_FillScreen(i!=10 ? fadecolors[i++] : 0x00);
	LD	BC,10
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_72
	LD	DE,(IX+-3)
	INC	DE
	LD	BC,(IX+-3)
	LD	(IX+-3),DE
	LEA	HL,IX+-69
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	(IX+-59),HL
	JR	L_73
L_72:
	LD	BC,0
	LD	(IX+-59),BC
L_73:
	LD	C,(IX+-59)
	LD	B,0
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;  119	        size_x += (LOGO_WIDTH-base_x)/10;
	LD	IY,(IX+-30)
	LEA	BC,IY+22
	LD	(IX+-30),BC
;  120	        size_y += (LOGO_HEIGHT-base_y)/10;
	LD	IY,(IX+-24)
	LEA	IY,IY+9
	LD	(IX+-24),IY
;  121	        if (size_x > 251) size_x = 255;
	LD	BC,(IX+-30)
	LD	HL,251
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_76
	LD	BC,255
	LD	(IX+-30),BC
L_76:
;  122	        if (size_y > 100) size_y = 100;
	LD	BC,(IX+-24)
	LD	HL,100
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_77
	LD	BC,100
	LD	(IX+-24),BC
L_77:
;  123	        holder->width = size_x;
	LD	A,(IX+-30)
	LD	IY,(IX+-6)
	LD	(IY+0),A
;  124	        holder->height = size_y;
	LD	A,(IX+-24)
	LD	(IY+1),A
;  125	        holder = gfx_ScaleSprite(flogo,holder);
	LD	BC,(IX+-6)
	PUSH	BC
	LD	BC,_flogo_data
	PUSH	BC
	CALL	_gfx_ScaleSprite
	POP	BC
	POP	BC
	LD	(IX+-6),HL
;  126	        center_x = (320/2) - (holder->width/2);
	LD	IY,(IX+-6)
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	BC,2
	CALL	__idivs
	LD	BC,HL
	LD	HL,160
	OR	A,A
	SBC	HL,BC
	LD	(IX+-34),HL
;  127	        center_y = 120 - size_y;
	LD	HL,120
	LD	BC,(IX+-24)
	OR	A,A
	SBC	HL,BC
	LD	(IX+-37),HL
;  128	        gfx_TransparentSprite_NoClip(holder,center_x,center_y);
	LD	C,(IX+-37)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-34)
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  129	        gfx_BlitBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;  130	        //delay((LOGO_WIDTH-size_x)/5);
;  131	    }
L_78:
	LD	BC,251
	LD	HL,(IX+-30)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_80
	LD	BC,100
	LD	HL,(IX+-24)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_79
L_80:
;  132	    quittable = 1, nOfStars = 0, i = 0, j = 255, k = 5, l = 0,menu_choice = 0;
	LD	(IX+-31),1
	LD	BC,0
	LD	(IX+-40),BC
	LD	BC,255
	LD	(IX+-12),BC
	LD	BC,5
	LD	(IX+-21),BC
	LD	BC,0
	LD	(IX+-9),BC
	LD	(IX+-18),BC
;  133	    while (true) {
L_206:
;  134	        //if (flags & 1<<1) goto menu;
;  135	        kb_Scan();
	CALL	_kb_Scan
;  136	        if (j < 255 && !(flags & 1<<1)) {
	LD	BC,255
	LD	HL,(IX+-12)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_83
	LD	A,(_flags)
	AND	A,2
	UEXT	HL
	LD	L,A
	CALL	__icmpzero
	JR	NZ,L_83
;  137	            gfx_FillScreen(0x00);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;  138	            gfx_TransparentSprite_NoClip(holder,center_x,center_y);
	LD	C,(IX+-37)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-34)
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  139	        } else {
	JR	L_87
L_83:
;  140	            gfx_FillScreen(0x00);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;  141	        }
L_87:
;  142	        if (flags & 1<<2) {
	LD	A,(_flags)
	AND	A,4
	UEXT	HL
	LD	L,A
	CALL	__icmpzero
	JR	Z,L_100
;  143	            //the sprite's original dimensions will be (80,30).
;  144	            holder->width = (uint8_t) (sin(((double)timer)/40) * 45) + 80;
	LD	BC,(_timer)
	CALL	__itol
	CALL	__ltof
	LD	HL,2097152
	LD	E,66
	CALL	__fdiv
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	CALL	_sin
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,3407872
	LD	E,66
	CALL	__fmul
	CALL	__ftol
	LD	A,C
	ADD	A,80
	LD	IY,(IX+-6)
	LD	(IY+0),A
;  145	            if (holder->width == 0) holder->width = 1; //Displayed sprites can't have a width of 0.
	LD	A,(IY+0)
	OR	A,A
	JR	NZ,L_85
	LD	IY,(IX+-6)
	LD	(IY+0),1
L_85:
;  146	            holder->height = 30;
	LD	IY,(IX+-6)
	LD	(IY+1),30
;  147	            holder = gfx_ScaleSprite(flogo,holder);
	LD	BC,(IX+-6)
	PUSH	BC
	LD	BC,_flogo_data
	PUSH	BC
	CALL	_gfx_ScaleSprite
	POP	BC
	POP	BC
	LD	(IX+-6),HL
;  148	            //pixelate(holder,rtc_Time() % 2);
;  149	            gfx_TransparentSprite_NoClip(holder,1,210);
	LD	BC,210
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  150	            //free(holder); //holder = NULL;
;  151	        }
L_100:
;  152	        for (i = 0;i < 30; i++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_99
L_97:
;  153	            gfx_SetColor(i % 2 ? 0x4A : 0xB5);
	LD	BC,2
	LD	HL,(IX+-3)
	CALL	__irems
	CALL	__icmpzero
	JR	Z,L_91
	LD	BC,74
	LD	(IX+-44),BC
	JR	L_92
L_91:
	LD	BC,181
	LD	(IX+-44),BC
L_92:
	LD	C,(IX+-44)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  154	            gfx_FillCircle(stars[i].x,stars[i].y,5);
	LD	HL,(IX+-3)
	LD	A,21
	CALL	__imul_b
	LD	(IX+-15),HL
	LD	HL,IX
	LD	BC,-1356
	ADD	HL,BC
	LD	BC,(IX+-15)
	ADD	HL,BC
	LD	BC,-1362
	CALL	__istix
	LD	BC,-1362
	LD	DE,5
	PUSH	DE
	CALL	__ildix
	LD	IY,HL
	LD	BC,(IY+3)
	PUSH	BC
	LD	BC,-1362
	CALL	__ildix
	LD	IY,HL
	LD	BC,(IY+0)
	PUSH	BC
	CALL	_gfx_FillCircle
	POP	BC
	POP	BC
	POP	BC
;  155	            if (i > nOfStars) { nOfStars++; break; }
	LD	BC,(IX+-3)
	LD	HL,(IX+-40)
	OR	A,A
	SBC	HL,BC
	JP	P,L_95
	LD	BC,(IX+-40)
	INC	BC
	LD	(IX+-40),BC
	JR	L_103
L_95:
;  156	            stars[i].x -= stars[i].xvel;
	LD	HL,IX
	LD	BC,-1356
	ADD	HL,BC
	LD	BC,(IX+-15)
	ADD	HL,BC
	LD	BC,-1365
	CALL	__istix
	LD	BC,-1365
	CALL	__ildix
	LD	IY,HL
	LD	BC,-1365
	CALL	__ildix
	LD	DE,HL
	LD	BC,-1365
	CALL	__ildix
	LD	BC,HL
	LD	HL,(IY+0)
	LD	IY,DE
	LD	DE,(IY+6)
	OR	A,A
	SBC	HL,DE
	LD	IY,BC
	LD	(IY+0),HL
;  157	            if (stars[i].x < -5) {
	LD	BC,-1365
	CALL	__ildix
	LD	IY,HL
	LD	HL,(IY+0)
	OR	A,A
	LD	BC,16777211
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_98
;  158	                stars[i].x = 320;
	LD	DE,(IX+-15)
	LD	HL,320
	PUSH	BC
	LD	BC,-1380	; spill
	CALL	__istix
	POP	BC
	LD	HL,IX
;  159	                stars[i].y = stars[i].y = rand()%235;
	LD	BC,-1368
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-1383	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-1356
	PUSH	BC
	PUSH	HL
	LD	HL,BC	; unspill
	LD	BC,-1386	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-1383	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-1383	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-1386	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	ADD	HL,BC
	LD	BC,-1383	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	ADD	HL,DE
	LD	IY,HL
	LD	HL,IX
	PUSH	BC
	LD	BC,-1377	; spill
	CALL	__istix
	LD	BC,-1380	; unspill
	CALL	__ildix
	POP	BC
	LD	(IY+0),HL
	PUSH	BC
	LD	BC,-1377	; unspill
	CALL	__ildix
	POP	BC
	LD	DE,(IX+-15)
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-1383	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-1356
	PUSH	BC
	PUSH	HL
	LD	HL,BC	; unspill
	LD	BC,-1389	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-1383	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-1383	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,-1389	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	ADD	HL,BC
	LD	BC,-1383	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	ADD	HL,DE
	CALL	__istix
	CALL	_rand
	LD	BC,235
	CALL	__irems
	LD	DE,HL
	LD	BC,-1368
	CALL	__ildix
	LD	IY,HL
	LD	(IY+3),DE
	LD	BC,-1368
	CALL	__ildix
	LD	IY,HL
	LD	BC,-1368
	CALL	__ildix
	LD	BC,(IY+3)
	LD	IY,HL
	LD	(IY+3),BC
;  160	                stars[i].xvel = ((rand()%21)+5);
	CALL	_rand
	LD	BC,21
	CALL	__irems
	LD	IY,HL
	LEA	BC,IY+5
	LD	HL,IX
	PUSH	BC
	PUSH	HL
	LD	HL,(IX+-15)
	LD	BC,-1371	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	DE,-1356
	PUSH	BC
	PUSH	HL
	LD	HL,DE	; unspill
	LD	BC,-1374	; spill
	CALL	__istix
	POP	HL
	LD	BC,-1371	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,-1371	; spill
	CALL	__istix
	POP	HL
	LD	BC,-1374	; unspill
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	ADD	HL,DE
	PUSH	BC
	LD	BC,-1371	; unspill
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	ADD	HL,DE
	LD	IY,HL
	LD	(IY+6),BC
;  161	            }
;  162	        }
L_98:
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_99:
	LD	BC,30
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_97
L_103:
;  163	        //gfx_SetTextXY(0,0);
;  164	        //gfx_SetColor(0xFF);
;  165	        //gfx_FillRectangle(0,0,24,8);
;  166	        //gfx_PrintUInt(transparent_index,3);
;  167	        if (j && !(flags & 1<<1))
	LD	HL,(IX+-12)
	CALL	__icmpzero
	JR	Z,L_107
	LD	A,(_flags)
	AND	A,2
	UEXT	HL
	LD	L,A
	CALL	__icmpzero
	JR	NZ,L_107
;  168	            gfx_TransparentSprite_NoClip(holder,center_x,center_y);
	LD	C,(IX+-37)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-34)
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
L_107:
;  169	        
;  170	        //set transition flag if [2nd] or [Enter] is pressed.
;  171	        if ((kb_Data[1] & kb_2nd || kb_Data[6] & kb_Enter) && !(flags & 1<<0)) {
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_105
	LD	A,(16056348)
	AND	A,1
	JR	Z,L_117
L_105:
	LD	A,(_flags)
	AND	A,1
	UEXT	HL
	LD	L,A
	CALL	__icmpzero
	JR	NZ,L_117
;  172	            flags |= 1<<0;
	LD	HL,(_flags)
	LD	BC,1
	CALL	__ior
	LD	(_flags),HL
;  173	        }
L_117:
;  174	        //fade out transition, cuts off once j is 0
;  175	        if (flags & 1<<0 && !(flags & 1<<1) && j) {
	LD	A,(_flags)
	AND	A,1
	UEXT	HL
	LD	L,A
	CALL	__icmpzero
	JR	Z,L_120
	LD	A,(_flags)
	AND	A,2
	UEXT	HL
	LD	L,A
	CALL	__icmpzero
	JR	NZ,L_120
	LD	HL,(IX+-12)
	CALL	__icmpzero
	JR	Z,L_120
;  176	            j -= 255/k; // 255/5 == 51, 255/10 == 25[.5]
	LD	HL,255
	LD	BC,(IX+-21)
	CALL	__idivs
	LD	BC,HL
	LD	HL,(IX+-12)
	OR	A,A
	SBC	HL,BC
	LD	(IX+-12),HL
;  177	            if (j < 0) j = 0;
	CALL	__icmpzero
	JP	P,L_115
	LD	BC,0
	LD	(IX+-12),BC
L_115:
;  178	            for (i = 0;i < 256;i++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_114
L_112:
;  179	                gfx_palette[i] = gfx_Darken(temp_arr[i],j);
	LD	C,(IX+-12)
	LD	B,0
	PUSH	BC
	LD	HL,(IX+-3)
	ADD	HL,HL
	LD	BC,HL
	LD	HL,IX
	LD	DE,-726
	ADD	HL,DE
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_Darken
	POP	BC
	POP	BC
	LD	BC,HL
	LD	HL,(IX+-3)
	ADD	HL,HL
	LD	DE,14877184
	ADD	HL,DE
	LD	(HL),C
	INC	HL
	LD	(HL),B
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  180	            }
L_114:
	LD	BC,256
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_112
;  181	        }
L_120:
;  182	        //activated once j is zeroed.
;  183	        if (!j && !(flags & 1<<1)) {
	LD	HL,(IX+-12)
	CALL	__icmpzero
	JR	NZ,L_136
	LD	A,(_flags)
	AND	A,2
	UEXT	HL
	LD	L,A
	CALL	__icmpzero
	JR	NZ,L_136
;  184	            flags |= 1<<1;
;  185	            gfx_FillScreen(0x00);
	LD	BC,0
	PUSH	BC
	LD	HL,(_flags)
	LD	BC,2
	CALL	__ior
	LD	(_flags),HL
	CALL	_gfx_FillScreen
	POP	BC
;  186	            gfx_BlitBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;  187	            holder->width = 80;
	LD	IY,(IX+-6)
	LD	(IY+0),80
;  188	            holder->height = 30;
;  189	            delay(200);
	LD	BC,200
	PUSH	BC
	LD	(IY+1),30
	CALL	_delay
	POP	BC
;  190	        }
L_136:
;  191	        //fade in transition, var j should have a value of 0 here.
;  192	        if (flags & 1<<1 && !(flags & 1<<2)) {
	LD	A,(_flags)
	AND	A,2
	UEXT	HL
	LD	L,A
	CALL	__icmpzero
	JR	Z,L_200
	LD	A,(_flags)
	AND	A,4
	UEXT	HL
	LD	L,A
	CALL	__icmpzero
	JR	NZ,L_200
;  193	            j += 255/k;
	LD	HL,255
	LD	BC,(IX+-21)
	CALL	__idivs
	LD	BC,(IX+-12)
	ADD	HL,BC
	LD	(IX+-12),HL
;  194	            if (j > 255) j = 255;
	LD	BC,HL
	LD	HL,255
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_127
	LD	BC,255
	LD	(IX+-12),BC
L_127:
;  195	            for (i = 0;i < 256;i++)
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_126
L_124:
;  196	                gfx_palette[i] = gfx_Darken(temp_arr[i],j);
	LD	C,(IX+-12)
	LD	B,0
	PUSH	BC
	LD	HL,(IX+-3)
	ADD	HL,HL
	LD	BC,HL
	LD	HL,IX
	LD	DE,-726
	ADD	HL,DE
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_Darken
	POP	BC
	POP	BC
	LD	BC,HL
	LD	HL,(IX+-3)
	ADD	HL,HL
	LD	DE,14877184
	ADD	HL,DE
	LD	(HL),C
	INC	HL
	LD	(HL),B
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_126:
	LD	BC,256
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_124
;  197	            if (j == 255) {
	LD	BC,255
	LD	HL,(IX+-12)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_200
;  198	                for (i = 0;i < 255;i++) gfx_palette[i] = temp_arr[i];
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_131
L_129:
	LD	HL,(IX+-3)
	ADD	HL,HL
	LD	BC,HL
	LD	HL,IX
	LD	DE,-726
	ADD	HL,DE
	LD	DE,BC
	ADD	HL,DE
	LD	IY,HL
	LD	HL,BC
	LD	BC,(IY)
	LD	DE,14877184
	ADD	HL,DE
	LD	(HL),C
	INC	HL
	LD	(HL),B
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_131:
	LD	BC,255
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_129
;  199	                flags |= 1<<2;
;  200	                sprintf(menu_options[0],"Main Menu");
	LD	BC,L__59
	PUSH	BC
	LD	HL,IX
	LD	BC,-216
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	HL,(_flags)
	LD	BC,4
	CALL	__ior
	LD	(_flags),HL
	CALL	_sprintf
	POP	BC
	POP	BC
;  201	                sprintf(menu_options[1],"Play");
	LD	BC,L__60
	PUSH	BC
	LD	IY,IX
	LD	BC,-216
	ADD	IY,BC
	LEA	BC,IY+10
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
;  202	                sprintf(menu_options[2],"Help");
	LD	BC,L__61
	PUSH	BC
	LD	IY,IX
	LD	BC,-216
	ADD	IY,BC
	LEA	BC,IY+20
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
;  203	                sprintf(menu_options[3],"Info");
	LD	BC,L__62
	PUSH	BC
	LD	IY,IX
	LD	BC,-216
	ADD	IY,BC
	LEA	BC,IY+30
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
;  204	                j = (temp_arr[0xED]-temp_arr[0xA8])/10;
	LD	HL,IX
	LD	BC,-726
	ADD	HL,BC
	LD	BC,474
	ADD	HL,BC
	LD	BC,(HL)
	CALL	__stoiu
	LD	DE,HL
	LD	HL,IX
	LD	BC,-726
	ADD	HL,BC
	LD	BC,336
	ADD	HL,BC
	LD	BC,(HL)
	CALL	__stoiu
	LD	BC,HL
	LD	HL,DE
	OR	A,A
	SBC	HL,BC
	LD	BC,10
	CALL	__idivs
	LD	(IX+-12),HL
;  205	            }
;  206	        }
L_200:
;  207	        if (flags & 1<<1 || flags & 1<<2) {
	LD	A,(_flags)
	AND	A,2
	UEXT	HL
	LD	L,A
	CALL	__icmpzero
	JR	NZ,L_199
	LD	A,(_flags)
	AND	A,4
	UEXT	HL
	LD	L,A
	CALL	__icmpzero
	JR	Z,L_201
L_199:
;  208	            //j is used for the color fade of the text.
;  209	            // use k to interrupt the key presses, and use menu_choice for the cursor position
;  210	            // use l for the scrolling text menus.
;  211	            gfx_SetTextTransparentColor(transparent_index);
	LD	BC,148
	PUSH	BC
	CALL	_gfx_SetTextTransparentColor
	POP	BC
;  212	            gfx_SetTextFGColor(0xE8);
	LD	BC,232
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  213	            gfx_SetTextBGColor(transparent_index);
	LD	BC,148
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  214	            gfx_SetTextScale(2,2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  215	            gfx_SetColor(0x40);
	LD	BC,64
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  216	            //outer rectangle
;  217	            gfx_FillRectangle(40,40,240,160);
	LD	BC,160
	PUSH	BC
	LD	BC,240
	PUSH	BC
	LD	BC,40
	PUSH	BC
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  218	            /*Text stuff here*/
;  219	            //Shows menu title if nothing's selected, otherwise the selected menu option.
;  220	            gfx_PrintStringXY((!(flags & 1<<4) ? menu_options[0] : menu_options[menu_choice+1]),40,40);
	LD	A,(_flags)
	AND	A,16
	UEXT	HL
	LD	L,A
	CALL	__icmpzero
	JR	NZ,L_140
	LD	HL,IX
	LD	BC,-216
	ADD	HL,BC
	LD	(IX+-53),HL
	JR	L_141
L_140:
	LD	HL,(IX+-18)
	INC	HL
	LD	A,10
	CALL	__imul_b
	LD	BC,HL
	LD	HL,IX
	LD	DE,-216
	ADD	HL,DE
	ADD	HL,BC
	LD	(IX+-53),HL
L_141:
	LD	BC,40
	PUSH	BC
	PUSH	BC
	LD	BC,(IX+-53)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  221	            gfx_SetColor(0xA8);
	LD	BC,168
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  222	            //inner rectangle
;  223	            gfx_FillRectangle(56,56,208,128);
	LD	BC,128
	PUSH	BC
	LD	BC,208
	PUSH	BC
	LD	BC,56
	PUSH	BC
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  224	            gfx_SetTextScale(3,2);
	LD	BC,2
	PUSH	BC
	LD	BC,3
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  225	            if (flags & 1<<2) // For some reason palette index 0xFF is acting weird with gfx_Darken
	LD	A,(_flags)
	AND	A,4
	UEXT	HL
	LD	L,A
	CALL	__icmpzero
	JR	Z,L_144
;  226	                if (gfx_palette[0xFF] != 0xFFFF) gfx_palette[0xFF] = 0xFFFF;
	LD	BC,(14877694)
	CALL	__stoiu
	OR	A,A
	LD	BC,65535
	SBC	HL,BC
	JR	Z,L_144
	LD	HL,14877694
	LD	(HL),255
	INC	HL
	LD	(HL),255
L_144:
;  227	            gfx_SetTextFGColor(0xED);
	LD	BC,237
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  228	            gfx_SetTextScale(2,2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  229	            if (!(flags & 1<<3)) {
	LD	A,(_flags)
	AND	A,8
	UEXT	HL
	LD	L,A
	CALL	__icmpzero
	JR	NZ,L_181
;  230	                //So that the cursor immediately moves after being pressed again.
;  231	                if (!(kb_Data[7] & kb_Up || kb_Data[7] & kb_Down)) k = 5;
	LD	A,(16056350)
	AND	A,8
	LD	(IX+-41),A
	OR	A,A
	JR	NZ,L_152
	LD	A,(16056350)
	AND	A,1
	JR	NZ,L_152
	LD	BC,5
	LD	(IX+-21),BC
L_152:
;  232	                
;  233	                if (kb_Data[7] & kb_Up) {
	LD	A,(IX+-41)
	OR	A,A
	JR	Z,L_158
;  234	                    if (k > 5) {
	LD	BC,(IX+-21)
	LD	HL,5
	OR	A,A
	SBC	HL,BC
	JP	P,L_158
;  235	                        k = 0;
	LD	BC,0
	LD	(IX+-21),BC
;  236	                        if (menu_choice - 1 < 0) menu_choice = 2;
	LD	BC,(IX+-18)
	DEC	BC
	LD	(IX+-47),BC
	LD	HL,BC
	CALL	__icmpzero
	CALL	__setflag
	JP	P,L_149
	LD	BC,2
	LD	(IX+-18),BC
;  237	                        else             menu_choice--;
	JR	L_158
L_149:
	LD	BC,(IX+-47)
	LD	(IX+-18),BC
;  238	                    }
;  239	                }
L_158:
;  240	                if (kb_Data[7] & kb_Down) {
	LD	A,(16056350)
	AND	A,1
	JR	Z,L_161
;  241	                    if (k > 5) {
	LD	BC,(IX+-21)
	LD	HL,5
	OR	A,A
	SBC	HL,BC
	JP	P,L_161
;  242	                        k = 0;
	LD	BC,0
	LD	(IX+-21),BC
;  243	                        if (menu_choice + 1 > 2) menu_choice = 0;
	LD	BC,(IX+-18)
	INC	BC
	LD	(IX+-50),BC
	OR	A,A
	LD	HL,2
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_155
	LD	BC,0
	LD	(IX+-18),BC
;  244	                        else             menu_choice++;
	JR	L_161
L_155:
	LD	BC,(IX+-50)
	LD	(IX+-18),BC
;  245	                    }
;  246	                }
L_161:
;  247	                if (kb_Data[1] & kb_2nd || kb_Data[6] & kb_Enter) {
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_160
	LD	A,(16056348)
	AND	A,1
	JR	Z,L_163
L_160:
;  248	                    flags |= 1<<3;
	LD	HL,(_flags)
	LD	BC,8
	CALL	__ior
	LD	(_flags),HL
;  249	                }
L_163:
;  250	                k++;
	LD	BC,(IX+-21)
	INC	BC
	LD	(IX+-21),BC
;  251	            }
L_181:
;  252	            if (!(flags & 1<<4)) {
	LD	A,(_flags)
	AND	A,16
	UEXT	HL
	LD	L,A
	CALL	__icmpzero
	JR	NZ,L_198
;  253	                for (i = 1;i <= 3;i++) {
	LD	BC,1
	LD	(IX+-3),BC
	JR	L_178
L_176:
;  254	                    if ((flags & 1<<3 && gfx_palette[0xED] > gfx_palette[0xA8])) {
	LD	A,(_flags)
	AND	A,8
	UEXT	HL
	LD	L,A
	CALL	__icmpzero
	JR	Z,L_174
	LD	BC,(14877658)
	LD	HL,(14877520)
	OR	A,A
	SBC.SIS	HL,BC
	JR	NC,L_174
;  255	                        gfx_palette[0xED] -= j;
	LD	BC,(IX+-12)
	LD	HL,(14877658)
	OR	A,A
	SBC.SIS	HL,BC
	LD	BC,HL
	LD	HL,14877658
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  256	                        if (gfx_palette[0xED] < gfx_palette[0xA8])
	LD	BC,(14877520)
	LD	HL,(14877658)
	OR	A,A
	SBC.SIS	HL,BC
	JR	NC,L_174
;  257	                            gfx_palette[0xED] = gfx_palette[0xA8];
	LD	BC,(14877520)
	LD	HL,14877658
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  258	                    }
L_174:
;  259	                    //Print the menu options, but first set the color if highlighted.
;  260	                    gfx_SetTextFGColor(i == (menu_choice + 1) && timer % 3 ? 0xFF : 0xED);
	LD	HL,(IX+-18)
	INC	HL
	OR	A,A
	LD	BC,(IX+-3)
	SBC	HL,BC
	JR	NZ,L_172
	LD	HL,(_timer)
	LD	BC,3
	CALL	__irems
	CALL	__icmpzero
	JR	Z,L_172
	LD	BC,255
	LD	(IX+-56),BC
	JR	L_173
L_172:
	LD	BC,237
	LD	(IX+-56),BC
L_173:
	LD	C,(IX+-56)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  261	                    gfx_PrintStringXY(menu_options[i],80,56 + ((i-1) * 16));
	LD	BC,(IX+-3)
	DEC	BC
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	IY,HL
	LEA	BC,IY+56
	PUSH	BC
	LD	BC,80
	PUSH	BC
	LD	HL,(IX+-3)
	LD	A,10
	CALL	__imul_b
	LD	BC,HL
	LD	HL,IX
	LD	DE,-216
	ADD	HL,DE
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  262	                    if (gfx_palette[0xED] == gfx_palette[0xA8])
	LD	BC,(14877520)
	LD	HL,(14877658)
	OR	A,A
	SBC.SIS	HL,BC
	JR	NZ,L_177
;  263	                        flags |= 1<<4;
	LD	HL,(_flags)
	LD	BC,16
	CALL	__ior
	LD	(_flags),HL
;  264	                    
;  265	                }
L_177:
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_178:
	LD	BC,(IX+-3)
	LD	HL,3
	OR	A,A
	SBC	HL,BC
	JP	P,L_176
;  266	                quittable = true;
	LD	(IX+-31),1
;  267	            }
L_198:
;  268	            //
;  269	            if (flags & 1<<4) {
	LD	A,(_flags)
	AND	A,16
	UEXT	HL
	LD	L,A
	CALL	__icmpzero
	JR	Z,L_201
;  270	                quittable = 0;
	LD	(IX+-31),0
;  271	                gfx_palette[0xED] = temp_arr[0xED];
	LD	HL,IX
	LD	BC,-726
	ADD	HL,BC
	LD	BC,474
	ADD	HL,BC
	LD	BC,(HL)
	LD	HL,14877658
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  272	                if (menu_choice == 0) {
	LD	HL,(IX+-18)
	CALL	__icmpzero
	JR	NZ,L_192
;  273	                    //Note: Use Gfx_ScaleSprite here
;  274	                    //holder = gfx_MallocSprite(160,240);
;  275	                    //holder2 = gfx_MallocSprite(160,240);
;  276	                    gfx_SetColor(0x00);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  277	                    for (i = 240;i > 16;i -= 16) {
	LD	BC,240
	LD	(IX+-3),BC
	JR	L_184
L_182:
;  278	                        //side 1
;  279	                        holder = gfx_MallocSprite(160,i+(i==0));
	LD	BC,_malloc
	PUSH	BC
	LD	HL,(IX+-3)
	CALL	__icmpzero
	JR	NZ,L__90
	LD	A,1
	JR	L__91
L__90:
	XOR	A,A
L__91:
	LD	B,(IX+-3)
	ADD	A,B
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,160
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-6),HL
;  280	                        holder2 = gfx_MallocSprite(160,i-16+(i==0));
	LD	BC,_malloc
	PUSH	BC
	LD	A,(IX+-3)
	SUB	A,16
	LD	HL,(IX+-3)
	CALL	__icmpzero
	LD	C,A
	JR	NZ,L__93
	LD	B,1
	JR	L__94
L__93:
	LD	B,0
L__94:
	ADD	A,B
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,160
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-27),HL
;  281	                        holder = gfx_GetSprite(holder,0,0);
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-6),HL
;  282	                        holder2 = gfx_ScaleSprite(holder,holder2);
	LD	BC,(IX+-27)
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	CALL	_gfx_ScaleSprite
	POP	BC
	POP	BC
	LD	(IX+-27),HL
;  283	                        gfx_Sprite_NoClip(holder2,0,0);
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,(IX+-27)
	PUSH	BC
	CALL	_gfx_Sprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  284	                        //side 2
;  285	                        holder = gfx_GetSprite(holder,160,0);
	LD	BC,0
	PUSH	BC
	LD	BC,160
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-6),HL
;  286	                        holder2 = gfx_ScaleSprite(holder,holder2);
	LD	BC,(IX+-27)
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	CALL	_gfx_ScaleSprite
	POP	BC
	POP	BC
	LD	(IX+-27),HL
;  287	                        gfx_Sprite_NoClip(holder2,160,0);
	LD	BC,0
	PUSH	BC
	LD	BC,160
	PUSH	BC
	LD	BC,(IX+-27)
	PUSH	BC
	CALL	_gfx_Sprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  288	                        //gfx_Sprite_NoClip(holder2,160,0);
;  289	                        gfx_FillRectangle_NoClip(0,i-16,320,240-(i-16));
	LD	A,(IX+-3)
	SUB	A,16
	LD	D,A
	LD	A,240
	SUB	A,D
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	C,D
	LD	DE,320
	PUSH	DE
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  290	                        gfx_BlitBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;  291	                        free(holder);
	LD	BC,(IX+-6)
	PUSH	BC
	CALL	_free
	POP	BC
;  292	                        free(holder2);
	LD	BC,(IX+-27)
	PUSH	BC
	CALL	_free
	POP	BC
	LD	IY,(IX+-3)
	LEA	IY,IY+-16
	LD	(IX+-3),IY
;  293	                    }
L_184:
	LD	BC,(IX+-3)
	LD	HL,16
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_182
;  294	                    return 0; //go to game?
	XOR	A,A
	JR	L_207
;  295	                }
L_192:
;  296	                //Help menu
;  297	                if (menu_choice == 1) { // Help
	LD	BC,1
	LD	HL,(IX+-18)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_194
;  298	                    if (kb_Data[7] & kb_Up) l+=3;
	LD	A,(16056350)
	AND	A,8
	JR	Z,L_189
	LD	IY,(IX+-9)
	LEA	IY,IY+3
	LD	(IX+-9),IY
;  299	                    else if (kb_Data[7] & kb_Down) l-=3;
	JR	L_190
L_189:
	LD	A,(16056350)
	AND	A,1
	JR	Z,L_190
	LD	IY,(IX+-9)
	LEA	IY,IY+-3
	LD	(IX+-9),IY
L_190:
;  300	                    gfx_SetTextBGColor(0x00);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  301	                    gfx_SetTextFGColor(0xFF);
	LD	BC,255
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  302	                    gfx_SetClipRegion(56,56,264,184);
	LD	BC,184
	PUSH	BC
	LD	BC,264
	PUSH	BC
	LD	BC,56
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetClipRegion
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  303	                    gfx_SetTextScale(1,1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  304	                    gfx_SetTextConfig(gfx_text_clip);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetTextConfig
	POP	BC
;  305	                    gfx_PrintStringXY("Use the arrow keys to move",56,56+l);
	LD	IY,(IX+-9)
	LEA	BC,IY+56
	PUSH	BC
	LD	BC,56
	PUSH	BC
	LD	BC,L__99
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  306	                    gfx_PrintStringXY("and navigate menus.",56,64+l);
	LD	IY,(IX+-9)
	LEA	BC,IY+64
	PUSH	BC
	LD	BC,56
	PUSH	BC
	LD	BC,L__100
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  307	                    gfx_PrintStringXY("You will find yourself using",56,72+l);
	LD	IY,(IX+-9)
	LEA	BC,IY+72
	PUSH	BC
	LD	BC,56
	PUSH	BC
	LD	BC,L__101
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  308	                    
;  309	                    gfx_SetTextBGColor(transparent_index);
	LD	BC,148
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  310	                    
;  311	                    //every button is divided by x intervals of 36 and y intervals of 14.
;  312	                    //2nd
;  313	                    i = gfx_GetStringWidth("2nd") + 12;
	LD	BC,L__102
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	LD	IY,HL
	LEA	BC,IY+12
	LD	(IX+-3),BC
;  314	                    gfx_SetColor(0x7F);
	LD	BC,127
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  315	                    gfx_FillRectangle(56,80+l,36,8 + 6);
	LD	BC,14
	PUSH	BC
	LD	BC,36
	PUSH	BC
	LD	IY,(IX+-9)
	LEA	BC,IY+80
	PUSH	BC
	LD	BC,56
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  316	                    gfx_PrintStringXY("2nd",56 + ((36/2) - (gfx_GetStringWidth("2nd")/2)),80 + 3 + l);
	LD	IY,(IX+-9)
	LEA	BC,IY+83
	PUSH	BC
	LD	BC,L__103
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	LD	A,1
	CALL	__ishru_b
	LD	BC,HL
	LD	HL,18
	OR	A,A
	SBC	HL,BC
	LD	IY,HL
	LEA	BC,IY+56
	PUSH	BC
	LD	BC,L__104
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  317	                    
;  318	                    //mode
;  319	                    gfx_SetColor(0x11);
	LD	BC,17
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  320	                    gfx_FillRectangle(56+36,80+l,i,8 + 6);
	LD	BC,14
	PUSH	BC
	LD	BC,(IX+-3)
	PUSH	BC
	LD	IY,(IX+-9)
	LEA	BC,IY+80
	PUSH	BC
	LD	BC,92
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  321	                    gfx_PrintStringXY("mode",92 + ((36/2) - (gfx_GetStringWidth("mode")/2)),80 + 3 + l);
	LD	IY,(IX+-9)
	LEA	BC,IY+83
	PUSH	BC
	LD	BC,L__105
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	LD	A,1
	CALL	__ishru_b
	LD	BC,HL
	LD	HL,18
	OR	A,A
	SBC	HL,BC
	LD	IY,HL
	LEA	BC,IY+92
	PUSH	BC
	LD	BC,L__106
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  322	                    
;  323	                    // alpha
;  324	                    gfx_SetColor(0xCF);
	LD	BC,207
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  325	                    gfx_FillRectangle(56,94+l,36,8 + 6);
	LD	BC,14
	PUSH	BC
	LD	BC,36
	PUSH	BC
	LD	IY,(IX+-9)
	LEA	BC,IY+94
	PUSH	BC
	LD	BC,56
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  326	                    gfx_PrintStringXY("alpha",56 + ((36/2) - (gfx_GetStringWidth("alpha")/2)),94 + 3 + l);
	LD	IY,(IX+-9)
	LEA	BC,IY+97
	PUSH	BC
	LD	BC,L__107
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	LD	A,1
	CALL	__ishru_b
	LD	BC,HL
	LD	HL,18
	OR	A,A
	SBC	HL,BC
	LD	IY,HL
	LEA	BC,IY+56
	PUSH	BC
	LD	BC,L__108
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  327	                    
;  328	                    //xt0n
;  329	                    gfx_SetColor(0x11);
	LD	BC,17
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  330	                    gfx_FillRectangle(56+36,94+l,i,8 + 6);
	LD	BC,14
	PUSH	BC
	LD	BC,(IX+-3)
	PUSH	BC
	LD	IY,(IX+-9)
	LEA	BC,IY+94
	PUSH	BC
	LD	BC,92
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  331	                    gfx_PrintStringXY("XT0n",92 + ((36/2) - (gfx_GetStringWidth("XT0n")/2)),94 + 3 + l);
	LD	IY,(IX+-9)
	LEA	BC,IY+97
	PUSH	BC
	LD	BC,L__109
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	LD	A,1
	CALL	__ishru_b
	LD	BC,HL
	LD	HL,18
	OR	A,A
	SBC	HL,BC
	LD	IY,HL
	LEA	BC,IY+92
	PUSH	BC
	LD	BC,L__110
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  332	                    
;  333	                    gfx_SetTextBGColor(0x00);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  334	                    gfx_PrintStringXY("alot. F1-F5 are used for the ",56,108+l);
	LD	IY,(IX+-9)
	LEA	BC,IY+108
	PUSH	BC
	LD	BC,56
	PUSH	BC
	LD	BC,L__111
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  335	                    gfx_PrintStringXY("menu and special commands.",56,116+l);
	LD	IY,(IX+-9)
	LEA	BC,IY+116
	PUSH	BC
	LD	BC,56
	PUSH	BC
	LD	BC,L__112
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  336	                    gfx_SetTextConfig(gfx_text_noclip);
	LD	BC,2
	PUSH	BC
	CALL	_gfx_SetTextConfig
	POP	BC
;  337	                    gfx_SetClipRegion(0,0,320,240);
	LD	BC,240
	PUSH	BC
	LD	BC,320
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetClipRegion
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  338	                }
;  339	                while (kb_Data[6] & kb_Clear || kb_Data[2] & kb_Alpha) {
	JR	L_194
L_195:
;  340	                    l = 0;
	LD	BC,0
	LD	(IX+-9),BC
;  341	                    flags &= ~(1<<4 | 1<<3);
	LD	HL,(_flags)
	LD	BC,16777191
	CALL	__iand
	LD	(_flags),HL
;  342	                    kb_Scan();
	CALL	_kb_Scan
;  343	                }
L_194:
	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_195
	LD	A,(16056340)
	AND	A,128
	JR	NZ,L_195
;  344	            }
;  345	        }
L_201:
;  346	        gfx_BlitBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;  347	        timer++;
	LD	DE,(_timer)
	INC	DE
	LD	BC,(_timer)
	LD	(_timer),DE
;  348	        if (kb_Data[6] & kb_Clear && quittable) {
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_206
	LD	A,(IX+-31)
	OR	A,A
	JR	Z,L_206
;  349	            return 1; //quit
	LD	A,1
;  350	        }
;  351	    }
;  352	}
L_207:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _title_screen ***************************
;Name                         Addr/Register   Size   Type
;_gfx_GetStringWidth                 IMPORT  -----   function
;_gfx_SetTextConfig                  IMPORT  -----   function
;_gfx_SetClipRegion                  IMPORT  -----   function
;_free                               IMPORT  -----   function
;_gfx_FillRectangle_NoClip           IMPORT  -----   function
;_gfx_Sprite_NoClip                  IMPORT  -----   function
;_gfx_GetSprite                      IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_gfx_SetTextScale                   IMPORT  -----   function
;_gfx_SetTextBGColor                 IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_gfx_SetTextTransparentColor        IMPORT  -----   function
;_sprintf                            IMPORT  -----   function
;_delay                              IMPORT  -----   function
;_gfx_Darken                         IMPORT  -----   function
;_gfx_FillCircle                     IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_sin                                IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function
;_gfx_Blit                           IMPORT  -----   function
;_gfx_TransparentSprite_NoClip       IMPORT  -----   function
;_gfx_ScaleSprite                    IMPORT  -----   function
;_gfx_FillScreen                     IMPORT  -----   function
;_rand                               IMPORT  -----   function
;_gfx_SetDefaultPalette              IMPORT  -----   function
;_flags                              STATIC      3   variable
;_timer                              STATIC      3   variable
;_gfx_SetTransparentColor            IMPORT  -----   function
;_malloc                             IMPORT  -----   function
;_gfx_AllocSprite                    IMPORT  -----   function
;_flogo_data                         IMPORT   5612   variable
;_1temp56                            STATIC     47   variable
;_0temp55                            STATIC     10   variable
;stars                              IX-1356    630   variable
;temp_arr                            IX-726    510   variable
;menu_options                        IX-216    100   variable
;flogo_indexes                       IX-116     47   variable
;fadecolors                           IX-69     10   variable
;temp70                               IX-59      3   variable
;temp170                              IX-56      3   variable
;temp138                              IX-53      3   variable
;G_10                                 IX-50      3   variable
;G_9                                  IX-47      3   variable
;temp89                               IX-44      3   variable
;G_8                                  IX-41      1   variable
;nOfStars                             IX-40      3   variable
;center_y                             IX-37      3   variable
;center_x                             IX-34      3   variable
;quittable                            IX-31      1   variable
;size_x                               IX-30      3   variable
;holder2                              IX-27      3   variable
;size_y                               IX-24      3   variable
;k                                    IX-21      3   variable
;menu_choice                          IX-18      3   variable
;G_4                                  IX-15      3   variable
;j                                    IX-12      3   variable
;l                                     IX-9      3   variable
;holder                                IX-6      3   variable
;i                                     IX-3      3   variable


; Stack Frame Size: 1404 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__59:
	DB	"Main Menu"
	DB	0
L__60:
	DB	"Play"
	DB	0
L__61:
	DB	"Help"
	DB	0
L__62:
	DB	"Info"
	DB	0
L__99:
	DB	"Use the arrow keys to move"
	DB	0
L__100:
	DB	"and navigate menus."
	DB	0
L__101:
	DB	"You will find yourself using"
	DB	0
L__102:
	DB	"2nd"
	DB	0
L__103:
	DB	"2nd"
	DB	0
L__104:
	DB	"2nd"
	DB	0
L__105:
	DB	"mode"
	DB	0
L__106:
	DB	"mode"
	DB	0
L__107:
	DB	"alpha"
	DB	0
L__108:
	DB	"alpha"
	DB	0
L__109:
	DB	"XT0n"
	DB	0
L__110:
	DB	"XT0n"
	DB	0
L__111:
	DB	"alot. F1-F5 are used for the "
	DB	0
L__112:
	DB	"menu and special commands."
	DB	0
	SEGMENT TEXT
_0temp55:
	DB	255
	DB	191
	DB	127
	DB	63
	DB	30
	DB	28
	DB	26
	DB	24
	DB	16
	DB	8
_1temp56:
	DB	148
	DB	181
	DB	222
	DB	255
	DB	214
	DB	180
	DB	182
	DB	107
	DB	108
	DB	254
	DB	149
	DB	214
	DB	41
	DB	74
	DB	75
	DB	73
	DB	33
	DB	147
	DB	140
	DB	0
	DB	1
	DB	32
	DB	65
	DB	115
	DB	106
	DB	139
	DB	64
	DB	105
	DB	97
	DB	98
	DB	130
	DB	138
	DB	129
	DB	137
	DB	170
	DB	171
	DB	162
	DB	194
	DB	193
	DB	203
	DB	172
	DB	227
	DB	195
	DB	229
	DB	230
	DB	205
	DB	197
	SEGMENT CODE
;  353	
;  354	/*Other Functions*/
;  355	
;  356	//These functions were modified to accomodate uint8_t variables
;  357	int search(uint8_t * array,unsigned int size,uint8_t value) {
_search:
	LD	HL,-3
	CALL	__frameset
;  358	    /*Returns position of item in array. Returns -1 on failure*/
;  359	    int counter;
;  360	    for (counter = 0;counter < size;counter++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_212
L_210:
;  361	        if (array[counter] == value) {
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	A,(HL)
	CP	A,(IX+12)
	JR	NZ,L_211
;  362	            return counter;
	LD	HL,(IX+-3)
	JR	L_214
;  363	        }
;  364	    }
L_211:
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_212:
	LD	BC,(IX+9)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_210
;  365	    return -1;
	LD	HL,16777215
;  366	}
L_214:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _search ***************************
;Name                         Addr/Register   Size   Type
;counter                               IX-3      3   variable
;value                                IX+12      1   parameter
;size                                  IX+9      3   parameter
;array                                 IX+6      3   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


;  367	/*int * unique(int array[],unsigned int size){
;  368	 //Returns the unique values in an array.
;  369	 //I decided to directly adjust the temp pointer instead of
;  370	 //using a variable to store the current position of the next value in temp.
;  371	 int i;
;  372	 int * temp = (int *) malloc(sizeof(int) * (size + 1));
;  373	 for (i = 0;i < size; i++) {
;  374	 if (search(temp,sizeof(temp),array[i]) == -1) {
;  375	 temp[size]++;
;  376	 *temp = array[i];
;  377	 temp += sizeof(int);
;  378	 }
;  379	 }
;  380	 temp -= temp[size] * sizeof(int);
;  381	 temp = realloc(temp,sizeof(int) * temp[size]);
;  382	 return temp;
;  383	 }*/
;  384	uint8_t * unique(uint8_t * array,unsigned int size) {
_unique:
	LD	HL,-9
	CALL	__frameset
;  385	    int i, new_size = 0;
	LD	BC,0
	LD	(IX+-9),BC
;  386	    uint8_t * temp = (uint8_t *) malloc(size * sizeof(uint8_t));
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_malloc
	POP	BC
	LD	(IX+-6),HL
;  387	    for (i = 0;i < size;i++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_220
L_218:
;  388	        if (search(temp,sizeof(temp)/sizeof(uint8_t),array[i]) == -1) {
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	LD	BC,3
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	CALL	_search
	POP	BC
	POP	BC
	POP	BC
	LD	BC,16777215
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_219
;  389	            temp[new_size++] = array[i]; //set the current index of temp to the next unique value, then move right.
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+-6)
	LD	BC,(IX+-9)
	ADD	HL,BC
	LD	A,(IY)
	LD	(HL),A
	LD	BC,(IX+-9)
	INC	BC
	LD	(IX+-9),BC
;  390	        }
;  391	    }
L_219:
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_220:
	LD	BC,(IX+9)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_218
;  392	    temp = realloc(temp,new_size * sizeof(uint8_t));
	LD	BC,(IX+-9)
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	CALL	_realloc
	POP	BC
	POP	BC
	LD	(IX+-6),HL
;  393	    return temp;
;  394	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _unique ***************************
;Name                         Addr/Register   Size   Type
;_realloc                            IMPORT  -----   function
;_malloc                             IMPORT  -----   function
;new_size                              IX-9      3   variable
;temp                                  IX-6      3   variable
;i                                     IX-3      3   variable
;size                                  IX+9      3   parameter
;array                                 IX+6      3   parameter


; Stack Frame Size: 21 (bytes)
;       Spill Code: 0 (instruction)


	XREF _flogo_data:ROM
	XREF _kb_Scan:ROM
	XREF _gfx_Darken:ROM
	XREF _gfx_SetClipRegion:ROM
	XREF _gfx_GetCharWidth:ROM
	XREF _gfx_GetStringWidth:ROM
	XREF _gfx_ScaleSprite:ROM
	XREF _gfx_GetSprite:ROM
	XREF _gfx_TransparentSprite_NoClip:ROM
	XREF _gfx_Sprite_NoClip:ROM
	XREF _gfx_SetTextTransparentColor:ROM
	XREF _gfx_SetTextBGColor:ROM
	XREF _gfx_SetTextFGColor:ROM
	XREF _gfx_SetTextConfig:ROM
	XREF _gfx_SetTextXY:ROM
	XREF _gfx_GetTextY:ROM
	XREF _gfx_GetTextX:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_PrintChar:ROM
	XREF _gfx_SetTextScale:ROM
	XREF _gfx_Blit:ROM
	XREF _gfx_SetDraw:ROM
	XREF _gfx_FillCircle:ROM
	XREF _gfx_FillRectangle_NoClip:ROM
	XREF _gfx_FillRectangle:ROM
	XREF _gfx_ZeroScreen:ROM
	XREF _gfx_FillScreen:ROM
	XREF _gfx_SetDefaultPalette:ROM
	XREF _gfx_SetTransparentColor:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_End:ROM
	XREF _gfx_Begin:ROM
	XREF _gfx_AllocSprite:ROM
	XREF _sprintf:ROM
	XREF _exit:ROM
	XREF _rand:ROM
	XREF _free:ROM
	XREF _realloc:ROM
	XREF _malloc:ROM
	XREF _sin:ROM
	XREF _delay:ROM
	XREF _random:ROM
	XREF __ladd:ROM
	XREF __idivs:ROM
	XREF __imuls:ROM
	XREF __ior:ROM
	XREF __iand:ROM
	XREF __irems:ROM
	XREF __lremu:ROM
	XREF __fmul:ROM
	XREF __fdiv:ROM
	XREF __ftol:ROM
	XREF __ltof:ROM
	XREF __stoiu:ROM
	XREF __itol:ROM
	XREF __ildix:ROM
	XREF __istix:ROM
	XREF __frameset:ROM
	XREF __setflag:ROM
	XREF __icmpzero:ROM
	XREF __imul_b:ROM
	XREF __ishru_b:ROM
	XDEF _unique
	XDEF _search
	XDEF _title_screen
	XDEF _main
	XDEF _flags
	XDEF _timer
	XDEF _r_swap
	XDEF _print_CharWrappedString
	XDEF _pixelated
	XDEF _pixelate
	END
